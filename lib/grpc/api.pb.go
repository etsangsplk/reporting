// Code generated by protoc-gen-gogo.
// source: api.proto
// DO NOT EDIT!

/*
	Package grpc is a generated protocol buffer package.

	It is generated from these files:
		api.proto

	It has these top-level messages:
		Event
		Events
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Event represents a single event sent over grpc
type Event struct {
	// Type is the event type such as "node accessed" or "user logged in"
	Type string `protobuf:"bytes,1,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	// Data is the JSON-encoded event payload
	Data []byte `protobuf:"bytes,2,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
	// Time is the Unix timestamp of the event
	Time int64 `protobuf:"varint,3,opt,name=Time,json=time,proto3" json:"Time,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

// Events defines a series of events sent over grpc
type Events struct {
	// Events is a list of events
	Events []*Event `protobuf:"bytes,1,rep,name=Events,json=events" json:"Events,omitempty"`
}

func (m *Events) Reset()                    { *m = Events{} }
func (m *Events) String() string            { return proto.CompactTextString(m) }
func (*Events) ProtoMessage()               {}
func (*Events) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *Events) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "grpc.Event")
	proto.RegisterType((*Events)(nil), "grpc.Events")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion3

// Client API for EventsService service

type EventsServiceClient interface {
	// Record records the provided list of events
	Record(ctx context.Context, in *Events, opts ...grpc1.CallOption) (*google_protobuf1.Empty, error)
}

type eventsServiceClient struct {
	cc *grpc1.ClientConn
}

func NewEventsServiceClient(cc *grpc1.ClientConn) EventsServiceClient {
	return &eventsServiceClient{cc}
}

func (c *eventsServiceClient) Record(ctx context.Context, in *Events, opts ...grpc1.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc1.Invoke(ctx, "/grpc.EventsService/Record", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventsService service

type EventsServiceServer interface {
	// Record records the provided list of events
	Record(context.Context, *Events) (*google_protobuf1.Empty, error)
}

func RegisterEventsServiceServer(s *grpc1.Server, srv EventsServiceServer) {
	s.RegisterService(&_EventsService_serviceDesc, srv)
}

func _EventsService_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(Events)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).Record(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.EventsService/Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).Record(ctx, req.(*Events))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventsService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.EventsService",
	HandlerType: (*EventsServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Record",
			Handler:    _EventsService_Record_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: fileDescriptorApi,
}

func (m *Event) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Event) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintApi(data, i, uint64(len(m.Type)))
		i += copy(data[i:], m.Type)
	}
	if len(m.Data) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintApi(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	if m.Time != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintApi(data, i, uint64(m.Time))
	}
	return i, nil
}

func (m *Events) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Events) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			data[i] = 0xa
			i++
			i = encodeVarintApi(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Api(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Api(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApi(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovApi(uint64(m.Time))
	}
	return n
}

func (m *Events) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], data[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Events) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Events: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Events: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0xef, 0xb4, 0xb9, 0x81, 0x4e, 0x2b, 0x4a, 0x40, 0x09, 0x15, 0x42, 0x88, 0x9b, 0x20,
	0x74, 0x06, 0xeb, 0xce, 0xa5, 0xda, 0x17, 0x88, 0xe2, 0xc2, 0x8d, 0x9c, 0xa6, 0xc7, 0x74, 0xc0,
	0x64, 0x86, 0xe4, 0xb4, 0x32, 0x5b, 0x5f, 0xc1, 0x8d, 0x8f, 0xe4, 0x52, 0xf0, 0x05, 0xa4, 0xfa,
	0x20, 0x92, 0x49, 0x0b, 0xee, 0xce, 0xf7, 0x67, 0xbe, 0xf9, 0xf1, 0x01, 0x18, 0x25, 0x4c, 0xad,
	0x49, 0x07, 0x5e, 0x51, 0x9b, 0x7c, 0x7c, 0x5f, 0x28, 0x5a, 0xae, 0xe6, 0x22, 0xd7, 0xa5, 0x6c,
	0x8d, 0x09, 0xe6, 0xba, 0xb1, 0x0d, 0xe1, 0x56, 0x16, 0x40, 0xf8, 0x0c, 0x56, 0xd2, 0x52, 0xd5,
	0x8b, 0x07, 0x03, 0x35, 0x59, 0x59, 0x68, 0x5d, 0x3c, 0x21, 0x18, 0xd5, 0x6c, 0x4f, 0x09, 0x46,
	0x49, 0xa8, 0x2a, 0x4d, 0x40, 0x4a, 0x57, 0x4d, 0xf7, 0xc3, 0xf8, 0x78, 0x9b, 0x3a, 0x35, 0x5f,
	0x3d, 0x4a, 0x2c, 0x0d, 0xd9, 0x2e, 0x4c, 0xae, 0xf8, 0xff, 0xd9, 0x1a, 0x2b, 0x0a, 0x02, 0xee,
	0xdd, 0x5a, 0x83, 0x21, 0x8b, 0x59, 0x3a, 0xc8, 0x3c, 0xb2, 0x06, 0x5b, 0xef, 0x1a, 0x08, 0xc2,
	0x5e, 0xcc, 0xd2, 0x51, 0xe6, 0x2d, 0x80, 0xc0, 0xf5, 0x54, 0x89, 0x61, 0x3f, 0x66, 0x69, 0x3f,
	0xf3, 0x48, 0x95, 0x98, 0x4c, 0xb8, 0xef, 0x46, 0x9a, 0xe0, 0x64, 0x77, 0x85, 0x2c, 0xee, 0xa7,
	0xc3, 0xe9, 0x50, 0xb4, 0xf8, 0xc2, 0x79, 0x99, 0x8f, 0x2e, 0x9a, 0xde, 0xf1, 0xbd, 0xae, 0x74,
	0x83, 0xf5, 0x5a, 0xe5, 0x18, 0xcc, 0xb8, 0x9f, 0x61, 0xae, 0xeb, 0x45, 0x30, 0xfa, 0xd3, 0x6f,
	0xc6, 0x47, 0xa2, 0x43, 0x17, 0x3b, 0x74, 0x31, 0x6b, 0xd1, 0x93, 0xc3, 0x97, 0xcf, 0x9f, 0xd7,
	0xde, 0x7e, 0xc2, 0xe5, 0xfa, 0x4c, 0x76, 0xa3, 0x17, 0xec, 0xf4, 0xf2, 0xe0, 0x7d, 0x13, 0xb1,
	0x8f, 0x4d, 0xc4, 0xbe, 0x36, 0x11, 0x7b, 0xfb, 0x8e, 0xfe, 0xcd, 0x7d, 0xf7, 0xf0, 0xfc, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x84, 0xb9, 0xe5, 0x9f, 0x70, 0x01, 0x00, 0x00,
}
